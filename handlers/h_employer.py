from telebot import types , TeleBot
import DataBase as db
import keyboards
from datetime import datetime , timedelta
import support
from decorator import *



def home_employer(bot: TeleBot, user_id: int):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–∫–∞–∑—á–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
        employer_data = db.get_employer_data(user_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not employer_data or 'projects' not in employer_data:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è")
            
        active_projects = employer_data['projects'] or []  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            "<b>üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞</b>\n\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{employer_data.get('balance', 0)}‚ÇΩ</code>\n"
            f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> <code>{employer_data.get('rating', 0)}/5.0</code>\n"
            f"üìÅ <b>–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:</b> <code>{len(active_projects)}</code>\n\n"
        )
        
        if not active_projects:
            message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'
        else:
            message += '<b>üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:</b>\n'
            for i, project in enumerate(active_projects[:3], 1):
                message += f'{i}. {project["title"]}\n'
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            user_id, 
            message, 
            parse_mode="HTML", 
            reply_markup=keyboards.home_employer_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error in home_employer for user {user_id}: {e}")
        bot.send_message(
            user_id,
            "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )




def register_employer_handlers(bot: TeleBot):
    
    
    @bot.message_handler(func=lambda m: m.text == "‚ûï –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç")
    @employer_only(bot , lambda msg: msg)
    def start_create_project(msg):
        try:
            bot.delete_state(msg.from_user.id , msg.chat.id)
            bot.set_state(msg.from_user.id , "project_creation" , msg.chat.id)
            
            message = (
                "<b>üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç!</b>\n\n"
                "<b>–®–∞–≥ 1 –∏–∑ 4</b>\n"
                "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞</b>.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚ñ™Ô∏è –°–∞–π—Ç-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –Ω–∞ Tilda\n"
                "‚ñ™Ô∏è –ß–∞—Ç-–±–æ—Ç –¥–ª—è Telegram\n"
                "‚ñ™Ô∏è 3D-–º–æ–¥–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –∏–≥—Ä—ã\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
            )
            
            bot.send_message(
                msg.chat.id ,
                message , 
                parse_mode= 'HTML' , 
                reply_markup=types.ReplyKeyboardRemove()
            )
            
            bot.register_next_step_handler(msg , process_project_title)

        except Exception as e:
            logger.error(f'Error in start_create_project: {e}')
    
    
    def process_project_title(msg):
        try:
            if msg.text == '/cancel':
                support.cancel_create_project(bot , msg.chat.id)
                home_employer(bot , msg.from_user.id)
                
            else:
                bot.add_data(msg.from_user.id , msg.chat.id , title = msg.text)
                
                message = (
                    "<b>üìÑ –®–∞–≥ 2 –∏–∑ 4</b>\n"
                    "–û–ø–∏—à–∏—Ç–µ <b>–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</b>.\n\n"
                    "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–º–µ—Ä—ã?\n\n"
                    "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
                    "–ù—É–∂–µ–Ω Telegram-–±–æ—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –∑–∞—è–≤–æ–∫. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è –∏ –Ω–æ–º–µ—Ä, –∞ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –º–æ–π –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                
                bot.register_next_step_handler(msg , process_project_description)
            
        except Exception as e:
            logger.error(f'Error in process_project_title: {e}')


    def process_project_description(msg):
        try:
            if msg.text == '/cancel':
                support.cancel_create_project(bot , msg.chat.id)
                home_employer(bot , msg.from_user.id)

            else:
                bot.add_data(msg.from_user.id , msg.chat.id , description = msg.text)
                
                message = (
                    "<b>‚è≥ –®–∞–≥ 3 –∏–∑ 4</b>\n"
                    "–£–∫–∞–∂–∏—Ç–µ <b>—Å—Ä–æ–∫, –¥–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≤–µ—Ä—à—ë–Ω(–º–∏–Ω–∏–º—É–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é)</b>.\n"
                    "—Ñ–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                bot.register_next_step_handler(msg, process_project_deadline)
        
        except Exception as e:
            logger.error(f'Error in process_project_description: {e}')


    def process_project_deadline(msg):
        try:
            if msg.text == '/cancel':
                support.cancel_create_project(bot , msg.chat.id)
                home_employer(bot , msg.from_user.id)

            else:
                deadline = datetime.strptime(msg.text, "%d.%m.%Y").date()
                
                if deadline < (datetime.now().date() + timedelta(weeks=1)):
                    bot.send_message(
                        msg.chat.id , 
                        '—É–∫–∞–∑–∞–Ω–∞—è –¥–∞—Ç–∞ –º–µ–Ω—å—à–µ —á–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é' 
                    )
                    return bot.register_next_step_handler(msg , process_project_deadline)

                bot.add_data(msg.from_user.id, msg.chat.id, deadline=deadline)
                
                message = (
                    "<b>üí∞ –®–∞–≥ 4 –∏–∑ 4</b>\n"
                    "–°–∫–æ–ª—å–∫–æ –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞?\n\n"
                    "<i>–ü—Ä–∏–º–µ—Ä:</i>\n"
                    "‚ñ™Ô∏è 1500\n"
                    "‚ñ™Ô∏è 3000‚ÇΩ\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã /cancel"
                )
                
                bot.send_message(
                    msg.chat.id , 
                    message , 
                    parse_mode='HTML'
                )
                bot.register_next_step_handler(msg, finalize_project_creation)
        
        except ValueError:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            bot.register_next_step_handler(msg, process_project_deadline)
        
        except Exception as e:
            logger.error(f'Error in process_project_deadline: {e}')


    def finalize_project_creation(msg):
        try:
            if msg.text == '/cancel':
                support.cancel_create_project(bot , msg.chat.id)
                home_employer(bot , msg.from_user.id)

            else:
                price = float(''.join(char for char in (msg.text) if char.isdigit()))
                
                if price <= 0:
                    bot.send_message(msg.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                    return bot.register_next_step_handler(msg, finalize_project_creation)
                
                with bot.retrieve_data(msg.from_user.id, msg.chat.id) as data:
                    project_id = db.create_project(
                        employer_id=msg.from_user.id,
                        title=data['title'],
                        description=data['description'],
                        deadline=data['deadline'],
                        price=price
                    )
            
                if project_id:
                    bot.send_message(
                        msg.chat.id,
                        f"‚úÖ –ü—Ä–æ–µ–∫—Ç ¬´{data['title']}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                        reply_markup=keyboards.home_employer_keyboard()
                    )
                    logger.info(f'user {msg.from_user.id} created the project {project_id}')
                else:
                    bot.send_message(
                        msg.chat.id,
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        reply_markup=keyboards.home_employer_keyboard()
                    )
                    logger.info(f"user {msg.from_user.id} couldn't create the project")
                
        except Exception as e:
            logger.error(f'Error finalize_project_creation: {e}')
        
        
        
        
        
    @bot.message_handler(func=lambda m: m.text == "üìÇ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã")
    @employer_only(bot , lambda msg: msg)
    def projects_employer(msg):
        try:
            employer_id = int(msg.from_user.id)
            project_ids = db.get_project_ids_employer(employer_id=employer_id)
            
            if not project_ids:
                bot.send_message(msg.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤.")
                return
            
             # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
            support.show_project_employer(bot , msg.from_user.id , project_ids[0] , 0 , msg.message_id)
            
        except Exception as e:
            logger.error(f'Error in projects_employer: {e}')


    @bot.callback_query_handler(func=lambda call: call.data.startswith(('employer_project_prev_' , 'employer_project_next_')))
    @employer_only(bot , lambda msg: msg)
    def handle_navigation(call):
        try:
            _ , _ , action , project_id , index = call.data.split('_')
            project_id , new_index = int(project_id) , int(index)

            employer_id = db.get_project_info(project_id , 'employer_id')
            all_projects = db.get_project_ids_employer(employer_id)
            if not all_projects:
                bot.answer_callback_query(call.id , '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤')
                return

            new_project_id = all_projects[new_index]

            support.show_project_employer(
                bot , 
                employer_id , 
                new_project_id , 
                new_index , 
                call.message.message_id
            )

        except Exception as e:
            logger.error(f'Error in handle_navigation: {e}')
    
    
    @bot.callback_query_handler(func=lambda call: call.data in ('employer_project_boundary_first', 'employer_project_boundary_last'))
    @employer_only(bot , lambda msg: msg)
    def handle_boundary(call):
        if call.data == 'employer_project_boundary_first':
            bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –ø—Ä–æ–µ–∫—Ç", show_alert=True)
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –∫—Ä–∞–π–Ω–∏–π –ø—Ä–æ–µ–∫—Ç", show_alert=True)
    
    
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith('employer_project_cancel_'))
    @employer_only(bot , lambda msg: msg)
    def handle_project_application(call):
        try:
            project_id = int(call.data.split('_')[3])
            db.update_project_status(project_id=project_id , new_status='canceled')
            bot.answer_callback_query(call.id, "–ø—Ä–æ–µ–∫—Ç –æ—Ç–º–µ–Ω—ë–Ω" , show_alert=True)
        except Exception as e:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞")
            print(f"Error in handle_project_application: {e}")